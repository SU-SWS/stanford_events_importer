<?php
/**
 * @file
 * Code for the Stanford Events Importer feature.
 */

include_once('stanford_events_importer.features.inc');

/*
 * Implements hook_help().
 */
function stanford_events_importer_help($path, $arg) {
  switch ($path) {
    case 'admin/help#stanford_events_importer':
      $output = '<h2>' . t('To Use') . '</h2>';
      $output .= '<ol><li>' . t('Enable the module and all dependencies') . '</li>';
      $output .= '<li>' . t('Go to !permissions and give selected roles the following permissions:', array('!permissions' => l('admin/people/permissions', 'admin/people/permissions')));
      $output .= '<ul><li>' . t('Import Stanford Event Importer feeds ') . '</li><li>' . t('Stanford Event: Create new content') . '</li><li>' . t('Stanford Event Importer: Create new content ') . '</li></ul></li>';
      $output .= '<li>' . t('!addnode of the type "Stanford Event Importer". Give it a title (eg, "Featured Events") and choose <strong>either</strong> a Category or an Organization (not one of each). ', array('!addnode' => l('Create a new node', 'node/add/stanford-event-importer')));
      $output .= '<ul><li>' . t('Full documentation of the Stanford Events Drupal Feed Service is available at !eventsdrupal', array('!eventsdrupal' => l('http://events.stanford.edu/xml/drupal/', 'http://events.stanford.edu/xml/drupal/'))) . '</li></ul></li>';
      $output .= '<li>' . t('Your events will be imported') . '</li>';
      $output .= '<li>' . t('Create a separate Stanford Event Importer node for each category or organization you would like to use to import events');
      $output .= '<li>' . t('You can set refresh rate and other options at !editimporter (requires enabling the Feeds UI module)', array('!editimporter' => l('admin/build/feeds/edit/stanford_event_importer', 'admin/build/feeds/edit/stanford_event_importer'))) . '</li></ol>';
      return $output;
  }
}

/*
 * Implements hook_form_FORM_ID_alter().
 */
function stanford_events_importer_form_stanford_event_importer_node_form_alter(&$form, &$form_state, $form_id) {
  //get our list of categories
  $query = db_select('stanford_events_category_list', 'c');
  $query->fields('c', array('category_id', 'name'));
  $result = $query->execute();
  $categories = $result->fetchAllKeyed();
  //add Featured and Today into the list
  $categories[] = 'Featured';
  $categories[] = 'Today';
  //grab the key of Featured and Today
  //These may change if additional categories are added, so don't make these persistent
  $featured_id = array_search('Featured', $categories);
  $today_id = array_search('Today', $categories);
  //stash the Featured and Today as variables, because they're special cases
  variable_set('stanford_events_featured_id', $featured_id);
  variable_set('stanford_events_today_id', $today_id);
  //tidy them up alphabetically
  asort(&$categories);
  //get our list of organizations
  $query = db_select('stanford_events_organization_list', 'o');
  $query->fields('o', array('organization_id', 'name'));
  $result = $query->execute();
  $organizations = $result->fetchAllKeyed();
  //tidy them up alphabetically
  asort(&$organizations);
  $form['s_events_cat_org'] = array (
    '#type' => 'fieldset',
    '#title' => t('Category or Organization'),
    '#collapsible' => FALSE,
    '#description' => t('Select <strong>either</strong> a Category <strong>or</strong> an Organization.'),
  );
  $form['s_events_cat_org']['s_events_category'] = array (
    '#type' => 'select',
    '#options' => $categories,
    '#title' => t('Category'),
    '#description' => t('Select a category'),
    '#empty_option' => '-- ' . t('None') . ' --',
  );
  $form['s_events_cat_org']['s_events_organization'] = array (
    '#type' => 'select',
    '#options' => $organizations,
    '#title' => t('Organization'),
    '#description' => t('Select an organization'),
    '#empty_option' => '-- ' . t('None') . ' --',
   );
  //disable the default feed URL form field
  //We'll supply our own options, then convert to a feed URL.
  $form['feeds']['#access'] = FALSE;
  //Check if the feed URL is blank (e.g., when creating a new node)
  if ($form['feeds']['FeedsHTTPFetcher']['source']['#default_value'] == '') {
    //if it's blank, set the default to featured, to avoid errors, because we're hiding the field
    $form['feeds']['FeedsHTTPFetcher']['source']['#default_value'] = 'http://events.stanford.edu/xml/drupal/v2.php?featured';
  }
  //if the feed URL is not blank (e.g., when editing an existing node), populate the correct dropdown.
  else {
    $feed_url = $form['feeds']['FeedsHTTPFetcher']['source']['#default_value'];
    $pattern = '/v2\.php\?.*$/';
    //look for 'v2.php?foo' or whatever in the feed URL, and capture that into $matches[0]
    preg_match($pattern, $feed_url, $matches);
    $current_selection = $matches[0];
    //strip out 'v2.php?'
    $current_selection = preg_replace('/v2\.php\?/', '', $current_selection);
    //today is a beautiful and unique snowflake
    if($current_selection == 'today') {
      $form['s_events_cat_org']['s_events_category']['#default_value'] = $today_id;
    }
    //featured also is a beautiful and unique snowflake
    elseif($current_selection == 'featured') {
      $form['s_events_cat_org']['s_events_category']['#default_value'] = $featured_id;
    }
    //if it's a category, pull the category id and make that the default in the dropdown
    elseif(preg_match('/category\=/', $current_selection) == 1) {
      $current_selection = preg_replace('/category\=/', '', $current_selection);
      $form['s_events_cat_org']['s_events_category']['#default_value'] = $current_selection;
    }
    //if it's an organization, pull the organization id and make that the default in the dropdown
    elseif(preg_match('/organization\=/', $current_selection) == 1) {
      $current_selection = preg_replace('/organization\=/', '', $current_selection);
      $form['s_events_cat_org']['s_events_organization']['#default_value'] = $current_selection;
    }
  }
  //make our validation function run first
  if (is_array($form['#validate'])) {
    array_unshift($form['#validate'], 'stanford_events_importer_build_feed_url');
    array_unshift($form['#validate'], 'stanford_events_importer_validate');
  }
  else {
    $form['#validate'][] = 'stanford_events_importer_validate';
    $form['#validate'][] = 'stanford_events_importer_build_feed_url';
  }
}

/*
 * Validate user input.
 */
function stanford_events_importer_validate($form, &$form_state) {
  // Check that the user did not select both a Category and an Organization.
  if (($form_state['values']['s_events_category'] != '') && ($form_state['values']['s_events_organization'] != '')) {
    form_set_error('s_events_cat_org', t('You must choose either a Category or an Organization, not one of each.'));
  }
  // Check that the user did not select both a Category and an Organization.
  if (($form_state['values']['s_events_category'] == '') && ($form_state['values']['s_events_organization'] == '')) {
    form_set_error('s_events_cat_org', t('You must choose either a Category or an Organization.'));
  }
}

/*
 * Build the feed URL out of the user's choice in the select list.
 */
function stanford_events_importer_build_feed_url($form, &$form_state) {
  //set the stem of the feed URL
  $feed_url = 'http://events.stanford.edu/xml/drupal/v2.php?';
  //grab the user-entered values, which have already been validated
  $category = $form_state['values']['s_events_category'];
  $organization = $form_state['values']['s_events_organization'];
  //append the correct category or organization number to the feed URL
  //the array of options that we presented to the user in $form['s_events_cat_org']['s_events_category'] returns a numeric value (the numeric key)
  if ($organization != '') {
    $feed_url .= 'organization=' . $organization;
  }
  elseif ($category != '') {
    //get the id/numeric key of our beautiful and unique snowflakes, Featured and Today
    $featured_id = variable_get('stanford_events_featured_id');
    $today_id =  variable_get('stanford_events_today_id');
    //set the Feed URL to pull Featured events if requested
    if ($category == $featured_id) {
      $feed_url .= 'featured';
    }
    //set the Feed URL to pull Today's events if requested
    elseif ($category == $today_id) {
      $feed_url .= 'today';
    }
    else {
      $feed_url .= 'category=' . $category;
    }
  }
  //pray we don't get this far.
  else {
    form_set_error(NULL, t('Something has gone horribly, horribly wrong.'));
  }
  //pop our constructed feed URL into the field in a format that Feeds and Feeds XPath Parser can digest it.
  $form_state['values']['feeds']['FeedsHTTPFetcher']['source'] = $feed_url;
}

/*
 * Fetch the list of categories.
 */
function stanford_events_importer_get_categories() {
  //get the XML url, either user-defined, or fall back to a default.
  $category_url = variable_get('stanford_events_category_source', 'http://events.stanford.edu/xml/drupal/v2.php?category-list');
  //Pull in the XML file from a URL
  $categories = drupal_http_request($category_url);
  //Put just the XML data into a variable
  $category_xml = $categories->data;
  return($category_xml);
}

/*
 * Write the categories to the database.
 */
function stanford_events_importer_write_categories($category_xml) {
  $parser = xml_parser_create();
  xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);
  xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);
  xml_parse_into_struct($parser, $category_xml, $valuesarray, $index);
  xml_parser_free($parser);
  foreach($index['guid'] as $key => $value) {
    $guid = $valuesarray[$value]['value'];
    $value = $value + 1;
    $category_id = $valuesarray[$value]['value'];
    $value = $value + 1;
    $name = $valuesarray[$value]['value'];
    $value = $value + 1;
    $type = $valuesarray[$value]['value'];
    $value = $value + 1;
    $description = $valuesarray[$value]['value'];
    $value = $value + 1;
    $tag = $valuesarray[$value]['value'];
    $result = db_insert('stanford_events_category_list')
      ->fields(array(
        'guid' => $guid,
        'category_id' => $category_id,
        'name' => $name,
        'type' => $type,
        'description' => $description,
        'tag' => $tag,
       ))
       ->execute();
  }
}

/*
 * Fetch the list of organizations.
 */
function stanford_events_importer_get_organizations() {
  //get the XML url, either user-defined, or fall back to a default.
  $organization_url = variable_get('stanford_events_organization_source', 'http://events.stanford.edu/xml/drupal/v2.php?organization-list');
  //Pull in the XML file from a URL
  $organizations = drupal_http_request($organization_url);
  //Put just the XML data into a variable
  $organization_xml = $organizations->data;
  return($organization_xml);
}

/*
 * Write the organizations to the database.
 */
function stanford_events_importer_write_organizations($organization_xml) {
  $parser = xml_parser_create();
  xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);
  xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);
  xml_parse_into_struct($parser, $organization_xml, $valuesarray, $index);
  xml_parser_free($parser);
  foreach($index['guid'] as $key => $value) {
    $guid = $valuesarray[$value]['value'];
    $value = $value + 1;
    $organization_id = $valuesarray[$value]['value'];
    $value = $value + 1;
    $name = $valuesarray[$value]['value'];
    $value = $value + 1;
    $type = $valuesarray[$value]['value'];
    $value = $value + 1;
    $email = $valuesarray[$value]['value'];
    $value = $value + 1;
    $phone = $valuesarray[$value]['value'];
    $value = $value + 1;
    $url = $valuesarray[$value]['value'];
    $value = $value + 1;
    $rss_url = $valuesarray[$value]['value'];
    $result = db_insert('stanford_events_organization_list')
      ->fields(array(
        'guid' => $guid,
        'organization_id' => $organization_id,
        'name' => $name,
        'type' => $type,
        'email' => $email,
        'phone' => $phone,
        'url' => $url,
        'rss_url' => $rss_url,
       ))
       ->execute();
  }
}